# Задание: Применение Принципа Открытости/Закрытости (Open/Closed Principle)
# в Разработке Простой Игры
# Цель: Цель этого домашнего задание - закрепить понимание и навыки
# применения  принципа открытости/закрытости (Open/Closed Principle),
# одного из пяти SOLID принципов объектно-ориентированного программирования.
# Принцип гласит, что программные сущности (классы, модули, функции и т.д.)
# должны быть открыты для расширения, но закрыты для модификации.
#
# Задача: Разработать простую игру, где игрок может использовать различные
# типы оружия для борьбы с монстрами. Программа должна быть спроектирована
# таким образом, чтобы легко можно было добавлять новые типы оружия,
# не  изменяя существующий код бойцов или механизм боя.
#
# Исходные данные:
# # - Есть класс `Fighter`, представляющий бойца.
# # - Есть класс `Monster`, представляющий монстра.
# # - Игрок управляет бойцом и может выбирать для него одно из вооружений
# для боя.
# # Шаг 1:Создайте абстрактный класс для оружия
# # - Создайте абстрактный класс `Weapon`, который будет содержать
# абстрактный  метод `attack()`.
# # Шаг 2: Реализуйте конкретные типы оружия
# # - Создайте несколько классов, унаследованных от `Weapon`, например,
# `Sword` и `Bow`. Каждый из этих классов реализует метод `attack()` своим
# уникальным способом.
# # Шаг 3: Модифицируйте класс `Fighter`
# # - Добавьте в класс `Fighter` поле, которое будет хранить объект  класса
# `Weapon`.
# # - Добавьте метод `change_weapon()`, который позволяет изменить оружие бойца.
# # Шаг 4: Реализация боя
# # - Реализуйте простой механизм для демонстрации боя между бойцом и
# монстром, исходя из выбранного оружия.
#
# Пример результата:
## Боец выбирает меч.
## Боец наносит удар мечом.
## Монстр побежден!
## Боец выбирает лук.
## Боец наносит удар из лука.
## Монстр побежден!
#
from abc import ABC, abstractmethod

# Оружие
class Weapon(ABC):
    def __init__(self, damage: int):
        self.damage = damage   # Уровень урона оружия

    @abstractmethod
    def attack(self):
        pass

class Sword(Weapon):
    def attack(self):
        print(f"Боец наносит удар мечом. Урон: {self.damage}")
        return self.damage

class Bow(Weapon):
    def attack(self):
        print(f"Боец стреляет из лука. Урон: {self.damage}")
        return self.damage

#Боец
class Fighter():
    def __init__(self, weapon):
        self.weapon = weapon

    def change_weapon(self, weapon):
        self.weapon = weapon
        print(f"Боец выбирает {self.weapon.__class__.__name__}")

    def attack(self):
        self.weapon.attack()
        return self.weapon.damage

#Монстр
class Monster():
    def __init__(self, health: int = 10):
        self.health = health

    def take_damage(self, damage: int):
        self.health -= damage
        if self.health <= 0:
            print("Монстр побежден!")
        else:
            print(f"У монстра осталось {self.health} здоровья")


bow = Bow(3)
sword = Sword(5)
fighter = Fighter(bow)
monster = Monster()

# Атака луком
damage = fighter.attack()
monster.take_damage(damage)

# Смена оружия
fighter.change_weapon(sword)
damage = fighter.attack()
monster.take_damage(damage)

# Атака мечом
damage = fighter.attack()
monster.take_damage(damage)

